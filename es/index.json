[{"categories":["AWS"],"contents":"Antes de entrar en el por qu√© y el c√≥mo, esto es lo que logramos:\n‚úÖ Reemplazamos un punto √∫nico de falla con componentes nativos de AWS\nüí∏ Reducimos los costos mensuales en un 70%\nüßë‚Äçüíª No m√°s SSH, servidores ni reinicios de NGINX\nüîê SSL totalmente gestionado con ACM\nüõ†Ô∏è Todo codificado y versionado con Terraform\nTodo esto ‚Äî sin un solo servidor EC2 ni archivo de configuraci√≥n NGINX. Por qu√© dejamos EC2 + NGINX (y cu√°nto nos ahorramos) Ten√≠amos un objetivo simple: redirigir tr√°fico de m√°s de 70 dominios diferentes.Primero lo resolvimos con lo que conoc√≠amos ‚Äî una instancia EC2 corriendo NGINX con reglas 301 y 302 hardcodeadas. Funcion√≥‚Ä¶ hasta que dej√≥ de funcionar.\nLo que empez√≥ como una soluci√≥n r√°pida se convirti√≥ en un dolor de cabeza operativo:\nCualquier nueva redirecci√≥n requer√≠a acceso por SSH y edici√≥n manual de archivos Reiniciar NGINX implicaba riesgos de downtime Un solo typo pod√≠a romper todo Y lo m√°s importante: est√°bamos manteniendo un servidor completo solo para manejar redirecciones Finalmente nos preguntamos: ¬øesto no es solo una planilla glorificada con SSL y problemas de uptime?Esa pregunta nos llev√≥ a redise√±ar todo con ALB, Terraform, ACM y nada m√°s.\nY funcion√≥ ‚Äî espectacularmente. üí∞ EC2 vs ALB: El costo de la simplicidad ‚ùå EC2 + NGINX ‚úÖ ALB + Terraform Costo ~$73/mes ~$22.50/mes Acceso Requiere SSH/SSM No requiere SSH/SSM SSL Configuraci√≥n manual SSL autom√°tico (ACM) Mantenimiento Edici√≥n manual de archivos Totalmente versionado en Terraform Escalabilidad Punto √∫nico de falla Reglas totalmente escalables Downtime Reinicios de NGINX causan downtime Cero downtime en cambios de reglas Eso representa una reducci√≥n de ~70%, sin servidores que mantener y con escalabilidad total.\nüõ† La nueva soluci√≥n: ALB + Terraform + SSL + Logs Una vez que migramos, quer√≠amos que la soluci√≥n fuera automatizada, segura y f√°cil de mantener. Esto fue lo que construimos:\nüìä Vista general: c√≥mo fluye el tr√°fico A veces es m√°s f√°cil entender este tipo de infraestructura visualmente. Ac√° ten√©s un diagrama de alto nivel que muestra c√≥mo viajan los requests del usuario a trav√©s de Route 53, el ALB, y c√≥mo se manejan las redirecciones:\nEste diagrama muestra:\nQu√© pasa cuando alguien accede a un dominio conocido o no registrado C√≥mo Route 53 enruta los requests al ALB La diferencia entre el tr√°fico que llega por el puerto 80 y el puerto 443 Qu√© hace el ALB cuando no encuentra una regla de redirecci√≥n (retorna 404) üîß Componentes utilizados ALB (Application Load Balancer): Maneja todos los requests HTTP/HTTPS Redirect Listener Rules: Definen qu√© se redirige y hacia d√≥nde Route 53: Hosted Zones ya manejaban el DNS de todos nuestros dominios AWS ACM: Para emitir y renovar autom√°ticamente los certificados SSL Access Logs: Activados y enviados a S3 para auditor√≠a Terraform: Usado para definir toda la infraestructura como c√≥digo Modules: Usamos los m√≥dulos de Anton Babenko para alb y acm üîê Gesti√≥n de certificados SSL con ACM Utilizamos ACM (AWS Certificate Manager) para solicitar certificados por dominio, con renovaci√≥n autom√°tica activada. Como ya ten√≠amos los dominios en Route 53, la validaci√≥n se hizo autom√°ticamente por DNS ‚Äî sin configuraci√≥n manual.\nC√≥digo:\nmodule \u0026#34;acm\u0026#34; { source = \u0026#34;terraform-aws-modules/acm/aws\u0026#34; version = \u0026#34;~\u0026gt; 4.0\u0026#34; domain_name = \u0026#34;example.com\u0026#34; subject_alternative_names = [\u0026#34;www.example.com\u0026#34;] zone_id = data.aws_route53_zone.main.zone_id validate_certificate = true } üåê Listener Rules + Redirects con ALB Implementamos dos listeners:\nPuerto 80 (HTTP): Redirige todo a HTTPS\nPuerto 443 (HTTPS): Procesa reglas de redirect (m√°ximo 100), con acci√≥n por defecto 404\nC√≥digo:\nmodule \u0026#34;redirect_alb\u0026#34; { source = \u0026#34;terraform-aws-modules/alb/aws\u0026#34; version = \u0026#34;9.12.0\u0026#34; name = \u0026#34;redirect-alb\u0026#34; load_balancer_type = \u0026#34;application\u0026#34; internal = false vpc_id = aws_vpc.main.id subnets = [aws_subnet.public_a.id, aws_subnet.public_b.id] access_logs = { bucket = aws_s3_bucket.alb_logs.bucket enabled = true prefix = \u0026#34;alb-access\u0026#34; } create_security_group = true security_group_ingress_rules = { http = { from_port = 80 to_port = 80 ip_protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } https = { from_port = 443 to_port = 443 ip_protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } } http_listeners = [ { port = 80 protocol = \u0026#34;HTTP\u0026#34; action = { type = \u0026#34;redirect\u0026#34; redirect = { port = \u0026#34;443\u0026#34; protocol = \u0026#34;HTTPS\u0026#34; status_code = \u0026#34;HTTP_301\u0026#34; } } } ] https_listeners = [ { port = 443 protocol = \u0026#34;HTTPS\u0026#34; certificate_arn = module.acm.certificate_arn rules = [ { priority = 10 actions = [{ type = \u0026#34;redirect\u0026#34; redirect = { host = \u0026#34;www.example.com\u0026#34; status_code = \u0026#34;HTTP_301\u0026#34; protocol = \u0026#34;HTTPS\u0026#34; } }] conditions = [{ host_header = { values = [\u0026#34;old-domain.com\u0026#34;] } }] }, { priority = 20 actions = [{ type = \u0026#34;redirect\u0026#34; redirect = { host = \u0026#34;www.blog.example.com\u0026#34; path = \u0026#34;/blog\u0026#34; status_code = \u0026#34;HTTP_301\u0026#34; protocol = \u0026#34;HTTPS\u0026#34; } }] conditions = [{ host_header = { values = [\u0026#34;legacy-blog.net\u0026#34;] } }] } ] default_action = { type = \u0026#34;fixed-response\u0026#34; fixed_response = { content_type = \u0026#34;text/plain\u0026#34; message_body = \u0026#34;Not Found\u0026#34; status_code = \u0026#34;404\u0026#34; } } } ] } ‚ú® Por qu√© funcion√≥ para nosotros ‚úÖ Completamente serverless ‚Äî sin EC2 que mantener\n‚úÖ ~70% de ahorro en costos\n‚úÖ Todos los redirects est√°n versionados con Terraform\n‚úÖ Certificados SSL gestionados autom√°ticamente (con renovaciones) v√≠a ACM\n‚úÖ Logs de acceso habilitados para auditor√≠a\n‚úÖ La regla por defecto devuelve 404 para evitar exponer detalles internos\n‚úÖ Puerto 80 redirige limpio a HTTPS (443)\n‚úÖ Lista para integrar con WAF o CloudWatch en el futuro\n‚úÖ Todo es Infrastructure-as-Code, listo para CI/CD\n‚ùå Lo Que No Usamos (Y Por Qu√©) Lambda@Edge ‚Äì ideal para l√≥gica compleja a escala, pero excesivo para simples 301. CloudFront Functions ‚Äì menor soporte en Terraform, m√°s limitaciones. S3 Static Hosting ‚Äì sin SSL incorporado a menos que se combine con CloudFront. Al final, gan√≥ la simplicidad. ALB cubri√≥ el 100% de nuestro caso de uso ‚Äî sin Lambda, sin CloudFront.\nüìå Consejo de Escalado AWS ALB soporta hasta 100 listener rules por listener.\nSi necesit√°s m√°s:\n‚Ä¢ üß© Usar m√∫ltiples listeners (por ejemplo, diferentes puertos o m√∫ltiples ALBs) ‚Ä¢ üöÄ Migr√° a CloudFront Functions o Lambda@Edge para redirects a gran escala ‚Ä¢ üóÇÔ∏è Agrup√° redirecciones usando dominios wildcard o patrones de ruta\nPlanific√° tu estrategia de redirects desde temprano para evitar cuellos de botella en escalabilidad.\nüí° Lecciones Aprendidas Manten√© la infraestructura tan simple como el problema lo requiere ‚Äî NGINX era excesivo para redirecciones. Las reglas de ALB son poderosas, pero no escalan infinitamente. Planific√° los l√≠mites desde el inicio. Terraform hizo que experimentar y hacer rollback fuera seguro y auditable. Depender de servicios gestionados como ACM para SSL elimin√≥ el 90% de la carga operativa. En resumen, transformamos un setup fr√°gil en EC2 en un sistema serverless robusto ‚Äî ahorrando dinero, esfuerzo y dolores de cabeza futuros.\nüôã‚Äç‚ôÇÔ∏è ¬øNecesit√°s Ayuda Con Esto? ¬øEst√°s considerando una migraci√≥n similar o quer√©s simplificar tu setup de redirecciones?\nHemos migrado este mismo patr√≥n en m√∫ltiples cuentas de AWS ‚Äî y el equipo de operaciones nunca mir√≥ atr√°s.\nüí¨ Hablemos en LinkedIn ‚Äî encantado de ayudarte o intercambiar ideas. ","date":"July 14, 2025","hero":"/images/default-hero.jpg","permalink":"https://nserbin.github.io/es/posts/aws/aws-networking/from-nginx-to-alb/","summary":"\u003cp\u003eAntes de entrar en el por qu√© y el c√≥mo, esto es lo que logramos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e‚úÖ Reemplazamos un punto √∫nico de falla con componentes nativos de AWS\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eüí∏ Reducimos los costos mensuales en un 70%\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eüßë‚Äçüíª No m√°s SSH, servidores ni reinicios de NGINX\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eüîê SSL totalmente gestionado con ACM\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eüõ†Ô∏è Todo codificado y versionado con Terraform\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n    \n\n\n\u003cdiv class=\"alert success\"\u003e\n    \u003cspan\u003e\u003ci data-feather=\"check-circle\"\u003e\u003c/i\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cstrong\u003eTodo esto ‚Äî sin un solo servidor EC2 ni archivo de configuraci√≥n NGINX.\u003c/strong\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003cdiv style=\"margin-top: 3rem;\"\u003e\u003c/div\u003e\n\u003ch2 id=\"por-qu√©-dejamos-ec2--nginx-y-cu√°nto-nos-ahorramos\"\u003ePor qu√© dejamos EC2 + NGINX (y cu√°nto nos ahorramos)\u003c/h2\u003e\n\u003cp\u003e\u003cdiv style=\"margin-top: 1rem;\"\u003e\u003c/div\u003e\nTen√≠amos un objetivo simple: redirigir tr√°fico de m√°s de 70 dominios diferentes.Primero lo resolvimos con lo que conoc√≠amos ‚Äî una instancia EC2 corriendo NGINX con reglas 301 y 302 hardcodeadas. Funcion√≥‚Ä¶ hasta que dej√≥ de funcionar.\u003c/p\u003e","tags":["Load Balancer","Redirects","NGINX","EC2"],"title":"NGINX Out, ALB In - 70% Cheaper Redirects with Zero Servers"}]