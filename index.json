[{"categories":null,"contents":"Why we left EC2 + NGINX behind (and how much it saved us) In one of my previous jobs, we needed to maintain over 70 domain redirects. Our initial solution was simple: an EC2 instance running NGINX with a bunch of 301 and 302 rules.\nAnd while that worked at first, things started to fall apart:\nAny new redirect meant SSH access and manual file editing Restarting NGINX came with downtime risks A single typo could break everything Most importantly: we were maintaining a full server just to handle redirects üí∞ EC2 vs ALB: The Cost of Simplicity ‚ùå EC2 + NGINX ‚úÖ ALB + Terraform Cost ~$73/mo ~$22.50/mo Access SSH required No SSH ever SSL Manual setup Auto SSL (ACM) Maintenance Manual file editing Fully versioned in Terraform Scalability Single point of failure Fully scalable rules Downtime NGINX restarts cause downtime Zero downtime on rule changes That‚Äôs a ~70% reduction, with zero servers to maintain and full scalability.\nüõ† The New Setup: ALB + Terraform + SSL + Logs Once we made the switch, we wanted the entire solution to be automated, secure, and easy to maintain. Here‚Äôs what we built:\nüó∫Ô∏è Visual Overview: How the Flow Works Sometimes it\u0026rsquo;s easier to understand this type of infrastructure visually. Here\u0026rsquo;s a high-level diagram that shows how user requests travel through Route 53, the ALB, and how redirect behavior is handled:\nThis shows:\nWhat happens when someone accesses a random or known domain How Route 53 routes requests to the ALB The difference between traffic arriving on port 80 and port 443 What the ALB does when no matching redirect rule is found (default 404) üîß Components Used ALB (Application Load Balancer): Handles all HTTP/HTTPS requests Redirect Listener Rules: Define what gets redirected and where Route 53: Hosted Zones already managed all our domain DNS AWS ACM: For issuing and auto-renewing SSL certificates Access Logs: Enabled and pushed to S3 for auditing Terraform: Used to define everything as code Modules: We used Anton Babenko‚Äôs modules for alb and acm üîê Managing SSL Certificates with ACM We used ACM (AWS Certificate Manager) to request certificates per domain, with auto-renewal enabled. Since we had all domains in Route 53, validation was done automatically via DNS ‚Äî no manual setup needed.\nExample:\nmodule \u0026#34;acm\u0026#34; { source = \u0026#34;terraform-aws-modules/acm/aws\u0026#34; version = \u0026#34;~\u0026gt; 4.0\u0026#34; domain_name = \u0026#34;example.com\u0026#34; subject_alternative_names = [\u0026#34;www.example.com\u0026#34;] zone_id = data.aws_route53_zone.main.zone_id validate_certificate = true } üåê ALB Listener Rules + Redirects We implemented two listeners:\nPort 80 (HTTP): Redirects everything to HTTPS\nPort 443 (HTTPS): Processes redirect rules (up to 100 max), default action is 404 module \u0026#34;redirect_alb\u0026#34; { source = \u0026#34;terraform-aws-modules/alb/aws\u0026#34; version = \u0026#34;9.12.0\u0026#34; name = \u0026#34;redirect-alb\u0026#34; load_balancer_type = \u0026#34;application\u0026#34; internal = false vpc_id = aws_vpc.main.id subnets = [aws_subnet.public_a.id, aws_subnet.public_b.id] access_logs = { bucket = aws_s3_bucket.alb_logs.bucket enabled = true prefix = \u0026#34;alb-access\u0026#34; } create_security_group = true security_group_ingress_rules = { http = { from_port = 80 to_port = 80 ip_protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } https = { from_port = 443 to_port = 443 ip_protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } } http_listeners = [ { port = 80 protocol = \u0026#34;HTTP\u0026#34; action = { type = \u0026#34;redirect\u0026#34; redirect = { port = \u0026#34;443\u0026#34; protocol = \u0026#34;HTTPS\u0026#34; status_code = \u0026#34;HTTP_301\u0026#34; } } } ] https_listeners = [ { port = 443 protocol = \u0026#34;HTTPS\u0026#34; certificate_arn = module.acm.certificate_arn rules = [ { priority = 10 actions = [{ type = \u0026#34;redirect\u0026#34; redirect = { host = \u0026#34;www.example.com\u0026#34; status_code = \u0026#34;HTTP_301\u0026#34; protocol = \u0026#34;HTTPS\u0026#34; } }] conditions = [{ host_header = { values = [\u0026#34;old-domain.com\u0026#34;] } }] }, { priority = 20 actions = [{ type = \u0026#34;redirect\u0026#34; redirect = { host = \u0026#34;www.blog.example.com\u0026#34; path = \u0026#34;/blog\u0026#34; status_code = \u0026#34;HTTP_301\u0026#34; protocol = \u0026#34;HTTPS\u0026#34; } }] conditions = [{ host_header = { values = [\u0026#34;legacy-blog.net\u0026#34;] } }] } ] default_action = { type = \u0026#34;fixed-response\u0026#34; fixed_response = { content_type = \u0026#34;text/plain\u0026#34; message_body = \u0026#34;Not Found\u0026#34; status_code = \u0026#34;404\u0026#34; } } } ] } ‚ú® Why This Worked for Us ‚úÖ No EC2 servers to maintain\n‚úÖ ~70% cost savings\n‚úÖ All redirects are version-controlled in Terraform\n‚úÖ SSL certificates managed automatically (with renewals) via ACM\n‚úÖ Access logs enabled for auditing\n‚úÖ Default rule returns 404 to avoid exposing internal details\n‚úÖ Port 80 cleanly redirects to HTTPS (443)\n‚úÖ Ready to integrate with WAF or CloudWatch in the future\nüìå Scaling Tip\nAWS ALB supports up to 100 listener rules per listener.\nIf you need more, consider:\n‚Ä¢ üß© Use multiple listeners (e.g., different ports or multiple ALBs)\n‚Ä¢ üöÄ Move to CloudFront Functions or Lambda@Edge for large-scale redirects\n‚Ä¢ üóÇÔ∏è Group redirects using wildcard domains or path patterns\nPlan your redirect strategy early to avoid scaling bottlenecks later.\nüí° Lessons Learned Keep infrastructure as simple as the problem requires ‚Äî NGINX was overkill for redirects. ALB rules are powerful, but don‚Äôt scale infinitely. Plan limits early. Terraform made experimentation and rollback safe and auditable. Relying on managed services like ACM for SSL removed 90% of the ops burden. ","date":"July 13, 2025","hero":"/images/default-hero.jpg","permalink":"https://nserbin.github.io/posts/aws/aws-networking/from-nginx-to-alb/","summary":"\u003ch2 id=\"why-we-left-ec2--nginx-behind-and-how-much-it-saved-us\"\u003eWhy we left EC2 + NGINX behind (and how much it saved us)\u003c/h2\u003e\n\u003cp\u003eIn one of my previous jobs, we needed to maintain over \u003cstrong\u003e70 domain redirects\u003c/strong\u003e. Our initial solution was simple: an \u003cstrong\u003eEC2 instance running NGINX\u003c/strong\u003e with a bunch of \u003ccode\u003e301\u003c/code\u003e and \u003ccode\u003e302\u003c/code\u003e rules.\u003c/p\u003e\n\u003cdiv style=\"margin-top: 3rem;\"\u003e\u003c/div\u003e\n\u003cp\u003eAnd while that worked at first, things started to fall apart:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAny new redirect meant SSH access and manual file editing\u003c/li\u003e\n\u003cli\u003eRestarting NGINX came with downtime risks\u003c/li\u003e\n\u003cli\u003eA single typo could break everything\u003c/li\u003e\n\u003cli\u003eMost importantly: we were maintaining a full server just to handle redirects\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv style=\"margin-top: 4rem;\"\u003e\u003c/div\u003e\n\u003ch3 id=\"-ec2-vs-alb-the-cost-of-simplicity\"\u003eüí∞ EC2 vs ALB: The Cost of Simplicity\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e‚ùå EC2 + NGINX\u003c/th\u003e\n          \u003cth\u003e‚úÖ ALB + Terraform\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eCost\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003e~$73/mo\u003c/td\u003e\n          \u003ctd\u003e~$22.50/mo\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eAccess\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eSSH required\u003c/td\u003e\n          \u003ctd\u003eNo SSH ever\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eSSL\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eManual setup\u003c/td\u003e\n          \u003ctd\u003eAuto SSL (ACM)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eMaintenance\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eManual file editing\u003c/td\u003e\n          \u003ctd\u003eFully versioned in Terraform\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eScalability\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eSingle point of failure\u003c/td\u003e\n          \u003ctd\u003eFully scalable rules\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eDowntime\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eNGINX restarts cause downtime\u003c/td\u003e\n          \u003ctd\u003eZero downtime on rule changes\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cdiv style=\"margin-top: 2rem;\"\u003e\u003c/div\u003e\n\u003cp\u003eThat‚Äôs a \u003cstrong\u003e~70% reduction\u003c/strong\u003e, with zero servers to maintain and full scalability.\u003c/p\u003e","tags":["Load Balancer","Redirects","NGINX","EC2"],"title":"From NGINX EC2 to AWS ALB for 70+ redirects - and cut costs by 70%"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://nserbin.github.io/posts/aws/_index.sp/","summary":"","tags":null,"title":"AWS"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://nserbin.github.io/posts/aws/aws-networking/_index.sp/","summary":"","tags":null,"title":"Networking"}]